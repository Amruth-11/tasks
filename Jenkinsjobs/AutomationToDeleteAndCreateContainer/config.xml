<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1436.vfa_244484591f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2214.vb_b_34b_2ea_9b_83"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2214.vb_b_34b_2ea_9b_83">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@332.va_1ee476d8f6d">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3964.v0767b_4b_a_0b_fa_">
    <script>pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS_ID =&apos;amruth11&apos; // Reference your credentials ID
        DOCKER_IMAGE = &apos;amruth11/hms-web-1&apos;
        CONTAINER_NAME = &apos;hms-web-container-4&apos; // Name your container for easy reference
        BASE_PORT = 8311 // Starting port number
    }

    stages {
        stage(&apos;Git Cloning&apos;) {
            steps {
                git credentialsId: &apos;Amruth-11&apos;, url: &apos;https://github.com/Amruth-11/automationproject.git&apos;
            }
        }

        stage(&apos;Login to Docker Hub&apos;) 
        {
            steps 
            {
                script
                {
                    docker.withRegistry(&apos;https://index.docker.io/v1/&apos;, DOCKER_CREDENTIALS_ID)
                }
            }
        }

        stage(&apos;Build Docker Image&apos;) {
            steps {
                script {
                    bat &quot;docker build -t ${DOCKER_IMAGE} .&quot;
                }
            }
        }

        stage(&apos;Push Docker Image&apos;) {
            steps {
                script {
                    bat &quot;docker push ${DOCKER_IMAGE}&quot;
                }
            }
        }

        stage(&apos;Deploy&apos;) {
            steps {
                script {
                    // Stop and remove the existing container if it exists
                    bat &quot;&quot;&quot;
                        docker ps -q -f &quot;name=${CONTAINER_NAME}&quot; &gt; nul 2&gt;&amp;1
                        if errorlevel 1 (
                            echo No existing container named ${CONTAINER_NAME} found.
                        ) else (
                            docker stop ${CONTAINER_NAME}
                            docker rm ${CONTAINER_NAME}
                        )
                    &quot;&quot;&quot;
                    
                    // Check if the base port is available
                    def port = BASE_PORT
                    while (true) {
                        // Check if the port is in use
                        def isPortUsed = bat(script: &quot;netstat -ano | findstr :${port}&quot;, returnStatus: true) == 0

                        if (!isPortUsed) {
                            break
                        }
                        port++
                    }
                    
                    // Run the new container on the available port
                    bat &quot;docker run -d --name ${CONTAINER_NAME} -p ${port}:80 ${DOCKER_IMAGE}&quot;
                    echo &quot;New container deployed on port: ${port}&quot;
                }
            }
        }
    }

    post {
        always {
            // Optionally clean up any dangling images
            script {
                bat &quot;docker image prune -f&quot;
            }
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>